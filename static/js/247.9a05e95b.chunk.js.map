{"version":3,"file":"static/js/247.9a05e95b.chunk.js","mappings":"yNA6DA,UAzDa,WAAO,IAADA,EACTC,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAAgCC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAkB5B,OAhBAI,EAAAA,EAAAA,YAAU,WACR,GAAKR,EAAL,CAGA,IAAMS,EAAS,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAEOC,EAAAA,EAAAA,IAAalB,GAAS,KAAD,EAApCc,EAAMC,EAAAI,KACZZ,EAAYO,GACZM,QAAQC,IAAIP,GAAQC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,SAEpBK,QAAQG,MAAKR,EAAAO,IAAQ,yBAAAP,EAAAS,OAAA,GAAAX,EAAA,kBAExB,kBARc,OAAAH,EAAAe,MAAA,KAAAC,UAAA,KASfjB,GAVA,CAWF,GAAG,CAACT,KAGF2B,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACGvB,GACCqB,EAAAA,EAAAA,KAAA,MACEG,MAAO,CACLC,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,IAAK,QACLL,SAEO,OAARvB,QAAQ,IAARA,GAAc,QAANP,EAARO,EAAU6B,YAAI,IAAApC,OAAN,EAARA,EAAgBqC,KAAI,SAAAD,GAAI,OACvBE,EAAAA,EAAAA,MAAA,MACEP,MAAO,CACLQ,UAAW,QACXT,SAAA,EAGFF,EAAAA,EAAAA,KAAA,OACEY,IACEJ,EAAKK,aAAY,kCAAAC,OACqBN,EAAKK,cACvC,oLAENE,IAAKP,EAAKQ,KACVC,MAAO,MACPC,OAAQ,SAEVlB,EAAAA,EAAAA,KAAA,KAAAE,SAAIM,EAAKQ,SAZJR,EAAKW,GAaP,MAGP,MAGV,C","sources":["components/Cast/Cast.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { requestCasts } from 'services/api';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [castData, setCastData] = useState(null);\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n    const fetchCast = async () => {\n      try {\n        const result = await requestCasts(movieId);\n        setCastData(result);\n        console.log(result);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {castData ? (\n        <ul\n          style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n            gap: '20px',\n          }}\n        >\n          {castData?.cast?.map(cast => (\n            <li\n              style={{\n                listStyle: 'none',\n              }}\n              key={cast.id}\n            >\n              <img\n                src={\n                  cast.profile_path\n                    ? `https://image.tmdb.org/t/p/w185${cast.profile_path}`\n                    : 'https://previews.123rf.com/images/urfandadashov/urfandadashov1805/urfandadashov180500070/100957966-photo-not-available-icon-isolated-on-white-background,-vector-illustration.jpg'\n                }\n                alt={cast.name}\n                width={'180'}\n                height={'260'}\n              />\n              <p>{cast.name}</p>\n            </li>\n          ))}\n        </ul>\n      ) : null}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["_castData$cast","movieId","useParams","_useState","useState","_useState2","_slicedToArray","castData","setCastData","useEffect","fetchCast","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","result","_context","prev","next","requestCasts","sent","console","log","t0","error","stop","apply","arguments","_jsx","_Fragment","children","style","display","flexWrap","justifyContent","gap","cast","map","_jsxs","listStyle","src","profile_path","concat","alt","name","width","height","id"],"sourceRoot":""}